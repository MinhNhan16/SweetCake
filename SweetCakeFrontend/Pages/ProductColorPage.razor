@page "/productcolors"
@layout AdminLayout
@using SweetCakeFrontend.Models
@using SweetCakeFrontend.Services
@inject ProductColorService ProductColorService

<div class="p-6">
    <h3 class="mb-6 text-center text-2xl font-bold text-[#dc3545]">
        🎨 Quản Lý Màu Sắc Sản Phẩm
    </h3>
    <div class="mt-8">
        <button @onclick="ShowAddForm" class="rounded-full bg-[#dc3545] px-6 py-2 text-white shadow-md transition-all duration-200 hover:bg-[#b52c3a]">
            ➕ Thêm màu sắc
        </button>
    </div>
    <br>


    @if (showForm)
    {
        <div class="mt-8 w-full rounded-lg bg-white p-6 shadow-md md:w-1/2">
            <h4 class="mb-4 text-lg font-semibold text-pink-700">
                @(isEditMode ? "📝 Sửa màu sắc" : "➕ Thêm màu sắc")
            </h4>

            <EditForm Model="productColor" OnValidSubmit="HandleValidSubmit">
                <DataAnnotationsValidator />
                <div class="mb-4">
                    <label class="mb-1 block text-gray-700">Tên màu sắc</label>
                    <InputText @bind-Value="productColor.Color" class="w-full rounded-md border border-gray-300 px-4 py-2 focus:outline-none focus:ring-2 focus:ring-pink-400" />
                    <ValidationMessage For="@(() => productColor.Color)" class="text-red-500 text-sm mt-1" />
                </div>

                <div class="flex gap-3">
                    <button type="submit" class="rounded-md bg-pink-600 px-4 py-2 text-white hover:bg-pink-700">
                        @(isEditMode ? "Cập nhật" : "Thêm")
                    </button>
                    <button type="button" @onclick="Cancel" class="rounded-md bg-gray-300 px-4 py-2 text-black hover:bg-gray-400">
                        Hủy
                    </button>
                </div>
            </EditForm>
        </div>
    }
    <br>
    @if (productColors == null)
    {
        <p class="text-gray-500">Đang tải...</p>
    }
    else
    {
        <div class="overflow-x-auto rounded-lg shadow-md">
            <table class="min-w-full border border-gray-200 bg-white text-left text-sm text-gray-700">
                <thead class="bg-[#dc3545] text-left text-white">
                    <tr>
                        <th class="px-4 py-3">ID</th>
                        <th class="px-4 py-3">Màu sắc</th>
                        <th class="px-4 py-3 text-center">Hành động</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var pc in productColors)
                    {
                        <tr class="border-t hover:bg-pink-50">
                            <td class="px-4 py-3">@pc.Id</td>
                            <td class="px-4 py-3">@pc.Color</td>
                            <td class="space-x-2 px-4 py-3 text-center">
                                <button @onclick="@(() => Edit(pc))" class="text-blue-600 hover:underline">Sửa</button>
                                <button @onclick="@(() => Delete(pc.Id))" class="text-red-600 hover:underline">Xóa</button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }


</div>

@code {
    private List<ProductColor>? productColors;
    private ProductColor productColor = new();
    private bool isEditMode = false;
    private bool showForm = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        productColors = await ProductColorService.GetAllAsync();
    }

    private async Task HandleValidSubmit()
    {
        if (isEditMode)
        {
            await ProductColorService.UpdateAsync(productColor);
        }
        else
        {
            await ProductColorService.CreateAsync(productColor);
        }

        await LoadData();
        ResetForm();
    }

    private void Edit(ProductColor pc)
    {
        productColor = new ProductColor
            {
                Id = pc.Id,
                Color = pc.Color
            };
        isEditMode = true;
        showForm = true;
    }

    private async Task Delete(int id)
    {
        await ProductColorService.DeleteAsync(id);
        await LoadData();
    }

    private void ShowAddForm()
    {
        ResetForm();
        showForm = true;
    }

    private void Cancel()
    {
        ResetForm();
    }

    private void ResetForm()
    {
        productColor = new ProductColor();
        isEditMode = false;
        showForm = false;
    }
}