@page "/"
@using SweetCakeFrontend.DTO
@using SweetCakeFrontend.Enums
@using SweetCakeFrontend.Extensions
@using SweetCakeFrontend.Models
@using SweetCakeFrontend.Models.Response
@using SweetCakeFrontend.Services
@inject NavigationManager NavigationManager
@inject HomeService HomeService
@inject AuthService AuthService
@inject ProductService ProductService
@inject CartService CartService
@inject IJSRuntime JS
@inject SweetCakeFrontend.Provider.JwtAuthenticationStateProvider JwtAuthenticationStateProvider

<!-- 🔝 Thanh điều hướng -->
<header class="sticky top-0 z-20 border-b bg-white py-4 shadow-sm">
    <div class="container mx-auto flex justify-between">
        <a class="navbar-brand text-danger fw-bold" href="/layout">🍰 SweetCake</a>
        <ul class="flex gap-x-3">
            <li class="text-sm hover:underline hover:text-primary"><a class="nav-link" href="/">Trang Chủ</a></li>
            <li class="text-sm hover:underline hover:text-primary"><a class="nav-link" href="/products">Sản Phẩm</a></li>
            <li>
                <a href="/cart" class="relative">
                    🛒 Giỏ Hàng
                    @if (cartItemCount > 0)
                    {
                        <span class="absolute -top-2 -right-2 rounded-full bg-red-500 px-2 text-xs text-white">@cartItemCount</span>
                    }
                </a>
            </li>
            <li class="text-sm hover:underline hover:text-primary"><a class="nav-link" href="/contact">Liên Hệ</a></li>
            @if (isAuthenticated && userLogged.Role == RoleEnum.Admin.GetDescription())
            {
                <li class="text-sm hover:underline hover:text-primary"><a class="nav-link" href="/layout">Quản lý</a></li>
            }
            @if (isAuthenticated)
            {
                <li class="text-sm text-gray-600">Xin chào, @userLogged.Email</li>
                <li class="text-sm hover:underline hover:text-primary"><a class="nav-link" href="/logout">Đăng xuất</a></li>
            }
            else
            {
                <li class="text-sm hover:underline hover:text-primary"><a class="nav-link" href="/register">Đăng ký</a></li>
                <li class="text-sm hover:underline hover:text-primary"><a class="nav-link" href="/login">Đăng nhập</a></li>
            }
        </ul>
    </div>
</header>

<!-- 🎬 Banner Slideshow -->
<div class="banner overflow-hidden">
    <img class="h-[500px] w-full object-fill object-center" src="images/banner3.jpg" alt="Bánh Ngon 3">
    <img class="h-[500px] w-full object-fill object-center" src="images/banner2.jpg" alt="Bánh Ngon 2">
    <img class="h-[500px] w-full object-fill object-center" src="images/banner1.png" alt="Bánh Ngon 1">
</div>

@* Products *@
<div>
    <div class="container mx-auto py-12">
        <!-- 🔍 Thanh tìm kiếm -->
        <div class="mx-auto mb-6 w-fit rounded-full border bg-white px-4 py-2 text-center shadow-sm">
            <input type="text" @bind="searchQuery" @bind:event="oninput" class="form-control d-inline-block w-60 outline-none" placeholder="Tìm kiếm bánh ngọt...">
            <button class="">🔍 Tìm kiếm</button>
        </div>

        <h3 class="mb-6 text-center text-lg font-semibold">🎂 Sản Phẩm Nổi Bật</h3>

        @if (products == null)
        {
            <p class="text-muted text-center">Đang tải sản phẩm...</p>
        }
        else if (!products.Any())
        {
            <p class="text-warning text-center">Không tìm thấy sản phẩm nào.</p>
        }
        else
        {
            <div class="grid grid-cols-4 items-center justify-center gap-6">
                @foreach (var product in products)
                {
                    <div class="overflow-hidden rounded-lg shadow-md">
                        <img src="@product.ImagePath" class="h-[196px] w-full object-cover object-center" alt="@product.Name" style="">
                        <div class="p-4">
                            <h5 class="mb-1 font-semibold">@product.Name</h5>
                            <p class="mb-1">@product.Description</p>
                            <h6 class="text-lg font-bold text-[#dc3545]">@product.Price.ToString("N0") VNĐ</h6>
                            <button class="mt-3 w-full rounded-full bg-[#dc3545] py-2 text-white" @onclick="@(() => AddToCart(product))">
                                🛒 Thêm vào giỏ
                            </button>
                        </div>
                    </div>
                }
            </div>
        }
    </div>
</div>

<!-- 📢 Phần giới thiệu -->
<div class="bg-[#f8f9fa] py-12">
    <div class="container mx-auto text-center">
        <h3 class="mb-6 text-center text-lg font-semibold">🍰 Giới Thiệu SweetCake</h3>
        <p class="text-muted">SweetCake - cửa hàng bánh ngọt hàng đầu với nguyên liệu tự nhiên và hương vị thơm ngon.</p>
    </div>
</div>

<script defer src="js/home.js"></script>

@code {
    private List<Product> products = new List<Product>();
    private string searchQuery = "";
    private bool isAuthenticated = false;
    private int cartItemCount = 0;
    private User userLogged = null;

    protected override async Task OnInitializedAsync()
    {
        // Lấy danh sách sản phẩm
        products = await ProductService.GetAllProductsAsync();

        // Tải thông tin người dùng
        await LoadUser();

        // Nếu đã đăng nhập, lấy số lượng sản phẩm trong giỏ hàng
        if (isAuthenticated && userLogged != null)
        {
            await LoadCartItemCount();
        }
    }

    private async Task LoadUser()
    {
        userLogged = await AuthService.GetCurrentUserAsync();
        if (userLogged != null)
        {
            isAuthenticated = true;
        }
    }

    private async Task LoadCartItemCount()
    {
        try
        {
            var carts = await CartService.GetCartsByAccountIdAsync(userLogged.Id);
            cartItemCount = carts?.Count ?? 0;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading cart item count: {ex.Message}");
            cartItemCount = 0;
        }
    }

    private async Task AddToCart(Product product)
    {
        if (!isAuthenticated || userLogged == null)
        {
            NavigationManager.NavigateTo("/login");
            return;
        }

        var newCart = new CartDto
            {
                ProductId = product.Id,
                Quantity = 1,
                Size = 1,
                CheckoutCount = 0,
                Price = product.Price,
                PaymentMode = "COD",
                DateCreated = DateTime.Now,
                TotalPrice = product.Price,
                PayPalPayment = 0,
                AccountId = userLogged.Id,
                AddressId = 1,
                SizeId = 1
            };

        var success = await CartService.CreateAsync(newCart);

        if (success)
        {
            await LoadCartItemCount(); // Tải lại số lượng sản phẩm trong giỏ hàng
            await JS.InvokeVoidAsync("alert", "🎉 Đã thêm vào giỏ hàng!");
        }
        else
        {
            await JS.InvokeVoidAsync("alert", "❌ Lỗi khi thêm vào giỏ hàng! Vui lòng thử lại.");
        }
    }

    private async Task Logout()
    {
        NavigationManager.NavigateTo("/logout");
    }
}