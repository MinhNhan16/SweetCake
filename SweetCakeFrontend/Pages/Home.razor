@page "/"
@using SweetCakeFrontend.DTO
@using SweetCakeFrontend.Enums
@using SweetCakeFrontend.Extensions
@using SweetCakeFrontend.Models
@using SweetCakeFrontend.Models.Response
@using SweetCakeFrontend.Services
@inject NavigationManager NavigationManager
@inject HomeService HomeService
@inject AuthService AuthService
@inject ProductService ProductService
@inject CartService CartService
@inject IJSRuntime JS
@inject SweetCakeFrontend.Provider.JwtAuthenticationStateProvider JwtAuthenticationStateProvider
<head>
    <style>
        /* Đảm bảo các hình ảnh trong grid có kích thước bằng nhau */
        .grid-container {
            display: grid;
            grid-template-columns: repeat(3, 1fr); /* 3 cột đều nhau */
            gap: 1rem; /* Khoảng cách giữa các cột */
        }

        .image-container {
            position: relative;
            overflow: hidden;
            height: 200px; /* Đặt chiều cao cố định cho hình ảnh */
        }

            .image-container img {
                width: 100%;
                height: 100%; /* Đảm bảo chiều cao luôn bằng với chiều cao của container */
                object-fit: cover; /* Cắt ảnh sao cho không bị méo */
            }
    </style>
</head>
<!-- 🔝 Thanh điều hướng -->
<header class="sticky top-0 z-20 border-b bg-white py-4 shadow-sm">
    <div class="container mx-auto flex justify-between">
        <a class="navbar-brand text-danger fw-bold" href="/layout">🍰 SweetCake</a>
        <ul class="flex gap-x-3">
            <li class="text-sm hover:underline hover:text-primary"><a class="nav-link" href="/">Trang Chủ</a></li>
            <li class="text-sm hover:underline hover:text-primary"><a class="nav-link" href="/products">Sản Phẩm</a></li>
            <li>
                <a href="/cart" class="relative">
                    🛒 Giỏ Hàng
                    @if (cartItemCount > 0)
                    {
                        <span class="absolute -top-2 -right-2 rounded-full bg-red-500 px-2 text-xs text-white">@cartItemCount</span>
                    }
                </a>
            </li>
            <li class="text-sm hover:underline hover:text-primary"><a class="nav-link" href="/contact">Liên Hệ</a></li>
            @if (isAuthenticated && userLogged.Role == RoleEnum.Admin.GetDescription())
            {
                <li class="text-sm hover:underline hover:text-primary"><a class="nav-link" href="/layout">Quản lý</a></li>
            }
            @if (isAuthenticated)
            {
                <li class="text-sm text-gray-600">Xin chào, @userLogged.Email</li>
                <li class="text-sm hover:underline hover:text-primary"><a class="nav-link" href="/logout">Đăng xuất</a></li>
                <li class="text-sm hover:underline hover:text-primary"><a class="nav-link" href="/update-profile">Cập nhật thông tin</a></li>
            }
            else
            {
                <li class="text-sm hover:underline hover:text-primary"><a class="nav-link" href="/register">Đăng ký</a></li>
                <li class="text-sm hover:underline hover:text-primary"><a class="nav-link" href="/login">Đăng nhập</a></li>
            }
        </ul>
    </div>
</header>

<!-- 🎬 Banner Slideshow -->
<div class="banner overflow-hidden">
    <img class="h-[500px] w-full object-fill object-center" src="images/banner3.png" alt="Bánh Ngon 3">
    <img class="h-[500px] w-full object-fill object-center" src="images/banner2.png" alt="Bánh Ngon 2">
    <img class="h-[500px] w-full object-fill object-center" src="images/banner1.png" alt="Bánh Ngon 1">
</div>

@* Products *@
<div>
    <div class="container mx-auto py-12">
        <!-- 🔍 Thanh tìm kiếm -->
        <div class="mx-auto mb-6 w-fit rounded-full border bg-white px-4 py-2 text-center shadow-sm">
            <input type="text" @bind="searchQuery" @bind:event="oninput" class="form-control d-inline-block w-60 outline-none" placeholder="Tìm kiếm bánh ngọt...">
            <button class="">🔍 Tìm kiếm</button>
        </div>

        <h3 class="mb-6 text-center text-lg font-semibold">🎂 Sản Phẩm Nổi Bật</h3>

        @if (products == null)
        {
            <p class="text-muted text-center">Đang tải sản phẩm...</p>
        }
        else if (!products.Any())
        {
            <p class="text-warning text-center">Không tìm thấy sản phẩm nào.</p>
        }
        else
        {
            <div class="grid grid-cols-4 items-center justify-center gap-6">
                @foreach (var product in products)
                {
                    <div class="overflow-hidden rounded-lg shadow-md">
                        <img src="@product.ImagePath" class="h-[196px] w-full object-cover object-center" alt="@product.Name" style="">
                        <div class="p-4">
                            <h5 class="mb-1 font-semibold">@product.Name</h5>
                            <p class="mb-1">@product.Description</p>
                            <h6 class="text-lg font-bold text-[#dc3545]">@product.Price.ToString("N0") VNĐ</h6>
                            <button class="mt-3 w-full rounded-full bg-[#dc3545] py-2 text-white" @onclick="@(() => ShowSizeForm(product))">
                                🛒 Thêm vào giỏ
                            </button>
                        </div>
                    </div>
                }
            </div>
        }
    </div>
</div>

<!-- 📢 Phần giới thiệu chi tiết về SweetCake -->
<div class="bg-[#f8f9fa] py-12">
    <div class="container mx-auto text-center">
        <h3 class="mb-6 text-center text-lg font-semibold">🍰 Giới Thiệu SweetCake</h3>
        <p class="text-muted">SweetCake - cửa hàng bánh ngọt hàng đầu với nguyên liệu tự nhiên và hương vị thơm ngon.</p>

        <!-- Phần giới thiệu chi tiết -->
        <div class="mt-8 grid grid-cols-1 gap-6 text-left md:grid-cols-3">
            <div>
                <h4 class="text-primary mb-2 font-semibold">🎂 Nguyên Liệu Tự Nhiên</h4>
                <p>Chúng tôi sử dụng các nguyên liệu chất lượng cao như bơ tươi, trứng gà sạch, và trái cây theo mùa để tạo nên những chiếc bánh ngon và an toàn cho sức khỏe.</p>
            </div>
            <div>
                <h4 class="text-primary mb-2 font-semibold">👩‍🍳 Đội Ngũ Thợ Làm Bánh Chuyên Nghiệp</h4>
                <p>Với hơn 10 năm kinh nghiệm, đội ngũ thợ bánh tại SweetCake không ngừng sáng tạo và nâng cao tay nghề để mang đến những mẫu bánh đẹp mắt và độc đáo.</p>
            </div>
            <div>
                <h4 class="text-primary mb-2 font-semibold">🚚 Giao Hàng Nhanh Chóng</h4>
                <p>Dịch vụ giao hàng trong ngày tại nội thành, đảm bảo bánh đến tay bạn luôn tươi mới và đúng giờ cho mọi dịp lễ, sinh nhật hay sự kiện.</p>
            </div>
        </div>

        <!-- Phần hình ảnh minh họa -->
        <div class="mt-10 grid grid-cols-1 gap-6 md:grid-cols-3">
            <div>
                <img src="images/nguyenlieu.jpg" alt="Nguyên liệu tự nhiên" class="mb-3 rounded-xl shadow-md" />
                <p class="text-sm text-gray-600">Nguyên liệu được tuyển chọn kỹ lưỡng từ những nhà cung cấp uy tín.</p>
            </div>
            <div>
                <img src="images/tho.jpg" alt="Đội ngũ thợ bánh" class="mb-3 rounded-xl shadow-md" />
                <p class="text-sm text-gray-600">Những người thợ yêu nghề, tận tâm với từng chiếc bánh.</p>
            </div>
            <div>
                <img src="images/giaohang.jpg" alt="Giao hàng" class="mb-3 rounded-xl shadow-md" />
                <p class="text-sm text-gray-600">Giao hàng đúng giờ, phục vụ tận nơi với nụ cười thân thiện.</p>
            </div>
        </div>
    </div>
</div>


<!-- Form chọn kích thước bánh -->
@if (isSizeFormVisible)
{
    <div class="modal bg-opacity-50 fixed inset-0 flex items-center justify-center bg-gray-600">
        <div class="w-96 rounded-lg bg-white p-6 shadow-lg">
            <h4 class="mb-4 text-lg font-semibold">Chọn Kích Cỡ Bánh</h4>
            <select @bind="selectedSize" class="form-control mb-4 w-full">
                <option value="1">10x15cm</option>
                <option value="2">15x20cm</option>
                <option value="3">20x25cm</option>
            </select>
            <button class="w-full rounded-full bg-[#dc3545] py-2 text-white" @onclick="() => AddToCartWithSize()">Thêm vào giỏ</button>
            <button class="mt-2 w-full py-2 text-center" @onclick="HideSizeForm">Hủy</button>
            <p class="mt-4 text-center text-green-500">@addToCartMessage</p>
        </div>
    </div>
}

<script defer src="js/home.js"></script>

@code {
    private List<Product> products = new List<Product>();
    private string searchQuery = "";
    private bool isAuthenticated = false;
    private int cartItemCount = 0;
    private User userLogged = null;

    // Variables for size selection form and cart message
    private bool isSizeFormVisible = false;
    private int selectedSize = 1; // Default size is 10x15 cm
    private string addToCartMessage = null;
    private Product productToAdd = null;

    protected override async Task OnInitializedAsync()
    {
        // Lấy danh sách sản phẩm
        products = await ProductService.GetAllProductsAsync();

        // Tải thông tin người dùng
        await LoadUser();

        // Nếu đã đăng nhập, lấy số lượng sản phẩm trong giỏ hàng
        if (isAuthenticated && userLogged != null)
        {
            await LoadCartItemCount();
        }
    }

    private async Task LoadUser()
    {
        userLogged = await AuthService.GetCurrentUserAsync();
        if (userLogged != null)
        {
            isAuthenticated = true;
        }
    }

    private async Task LoadCartItemCount()
    {
        try
        {
            var carts = await CartService.GetCartsByAccountIdAsync(userLogged.Id);
            cartItemCount = carts?.Count ?? 0;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading cart item count: {ex.Message}");
            cartItemCount = 0;
        }
    }

    private void ShowSizeForm(Product product)
    {
        productToAdd = product;
        isSizeFormVisible = true;
    }

    private void HideSizeForm()
    {
        isSizeFormVisible = false;
    }

    private async Task AddToCartWithSize()
    {
        if (!isAuthenticated || userLogged == null)
        {
            NavigationManager.NavigateTo("/login");
            return;
        }

        try
        {
            // Lấy danh sách giỏ hàng hiện tại của người dùng
            var carts = await CartService.GetCartsByAccountIdAsync(userLogged.Id);

            // Kiểm tra xem sản phẩm với ProductId và SizeId đã tồn tại trong giỏ hàng chưa
            var existingCartItem = carts?.FirstOrDefault(c => c.ProductId == productToAdd.Id && c.SizeId == selectedSize);

            if (existingCartItem != null)
            {
                // Nếu sản phẩm đã tồn tại, tăng số lượng
                existingCartItem.Quantity += 1;
                existingCartItem.TotalPrice = existingCartItem.Price * existingCartItem.Quantity;

                // Cập nhật giỏ hàng
                var updateSuccess = await CartService.UpdateAsync(existingCartItem);
                if (updateSuccess)
                {
                    await LoadCartItemCount(); // Tải lại số lượng sản phẩm trong giỏ hàng
                    addToCartMessage = "🎉 Đã cập nhật số lượng trong giỏ hàng!";
                }
                else
                {
                    addToCartMessage = "❌ Lỗi khi cập nhật giỏ hàng! Vui lòng thử lại.";
                }
            }
            else
            {
                // Nếu sản phẩm chưa tồn tại, tạo mới
                var newCart = new CartDto
                    {
                        ProductId = productToAdd.Id,
                        Quantity = 1,
                        Size = selectedSize,
                        CheckoutCount = 0,
                        Price = productToAdd.Price,
                        PaymentMode = "COD",
                        DateCreated = DateTime.Now,
                        TotalPrice = productToAdd.Price,
                        PayPalPayment = 0,
                        AccountId = userLogged.Id,
                        AddressId = 1,
                        SizeId = selectedSize
                    };

                var createSuccess = await CartService.CreateAsync(newCart);
                if (createSuccess)
                {
                    await LoadCartItemCount(); // Tải lại số lượng sản phẩm trong giỏ hàng
                    addToCartMessage = "🎉 Đã thêm vào giỏ hàng!";
                }
                else
                {
                    addToCartMessage = "❌ Lỗi khi thêm vào giỏ hàng! Vui lòng thử lại.";
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error adding to cart: {ex.Message}");
            addToCartMessage = "❌ Đã xảy ra lỗi! Vui lòng thử lại.";
        }

        HideSizeForm();
    }
}
