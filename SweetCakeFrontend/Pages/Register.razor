@page "/register"
@namespace SweetCakeFrontend.Pages
@using SweetCakeFrontend.Models
@using Microsoft.AspNetCore.Components.Forms
@inject HttpClient Http
@inject NavigationManager Navigation

<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet" />
<link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet" />

<div class="flex min-h-screen items-center justify-center bg-cover bg-center" style="background-image: url('/images/picture.jpg');">
    <div class="bg-opacity-90 w-full max-w-md rounded-xl bg-white p-8 shadow-lg">
        <h2 class="mb-2 text-center text-2xl font-semibold text-gray-800">Đăng ký</h2>
        <p class="mb-6 text-center text-sm text-gray-500">Vui lòng nhập thông tin đăng ký của bạn</p>

        <EditForm Model="@account" OnValidSubmit="HandleRegister">
            <DataAnnotationsValidator />

            <div class="mb-4">
                <label class="block text-sm font-medium text-gray-700">Tên đăng nhập</label>
                <InputText class="mt-1 w-full rounded-lg border px-4 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500" @bind-Value="account.Username" />
                <ValidationMessage For="@(() => account.Username)" class="text-red-500 text-sm mt-1" />
            </div>

            <div class="mb-4">
                <label class="block text-sm font-medium text-gray-700">Email</label>
                <InputText type="email" class="mt-1 w-full rounded-lg border px-4 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500" @bind-Value="account.Email" />
                <ValidationMessage For="@(() => account.Email)" class="text-red-500 text-sm mt-1" />
            </div>

            <div class="mb-4">
                <label class="block text-sm font-medium text-gray-700">Mật khẩu</label>
                <InputText type="password" class="mt-1 w-full rounded-lg border px-4 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500" @bind-Value="account.Password" />
                <ValidationMessage For="@(() => account.Password)" class="text-red-500 text-sm mt-1" />
            </div>

            <div class="mb-4">
                <label class="block text-sm font-medium text-gray-700">Họ tên</label>
                <InputText class="mt-1 w-full rounded-lg border px-4 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500" @bind-Value="account.FullName" />
                <ValidationMessage For="@(() => account.FullName)" class="text-red-500 text-sm mt-1" />
            </div>

            <div class="mb-4">
                <label class="block text-sm font-medium text-gray-700">Số điện thoại</label>
                <InputText class="mt-1 w-full rounded-lg border px-4 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500" @bind-Value="account.Phone" />
                <ValidationMessage For="@(() => account.Phone)" class="text-red-500 text-sm mt-1" />
            </div>

            <div class="mb-6">
                <label class="block text-sm font-medium text-gray-700">Địa chỉ</label>
                <InputText class="mt-1 w-full rounded-lg border px-4 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500" @bind-Value="account.Address" />
                <ValidationMessage For="@(() => account.Address)" class="text-red-500 text-sm mt-1" />
            </div>

            <button type="submit" class="w-full rounded-lg bg-blue-600 px-4 py-2 text-white transition duration-200 hover:bg-blue-700">
                Đăng ký
            </button>
            <div class="mt-4 text-center text-sm text-gray-600">
                Nếu bạn đã có tài khoản?
                <a href="/login" class="text-primary font-semibold hover:underline">
                    Hãy đăng nhập ngay
                </a>
            </div>
        </EditForm>

        @if (!string.IsNullOrEmpty(message))
        {
            <p class="mt-4 text-center font-medium @(isSuccess ? "text-green-600" : "text-red-600")">@message</p>
        }
    </div>
</div>

@code {
    private RegisterRequest account = new() { Role = "Customer" };
    private string message = string.Empty;
    private bool isSuccess;

    private async Task HandleRegister()
    {
        try
        {
            var response = await Http.PostAsJsonAsync("https://localhost:44366/api/account/register", account);
            if (response.IsSuccessStatusCode)
            {
                message = "Đăng ký thành công!";
                isSuccess = true;
                await Task.Delay(2000);
                Navigation.NavigateTo("/login");
            }
            else
            {
                message = await response.Content.ReadAsStringAsync();
                isSuccess = false;
            }
        }
        catch (Exception ex)
        {
            message = $"Lỗi: {ex.Message}";
            isSuccess = false;
        }
    }
}
