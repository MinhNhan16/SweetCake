@page "/cart"
@layout HomeLayout
@inject CartService CartService
@inject IJSRuntime JS
@inject NavigationManager NavigationManager
@using SweetCakeFrontend.DTO
@using SweetCakeFrontend.Models
@using SweetCakeFrontend.Services

<h3 class="mb-6 text-xl font-semibold">🛒 Quản lý Giỏ hàng</h3>

@if (carts == null)
{
    <p class="text-gray-500">Đang tải dữ liệu...</p>
}
else if (carts.Count == 0)
{
    <p class="text-gray-500">Giỏ hàng của bạn hiện chưa có sản phẩm.</p>
}
else
{
    <div class="overflow-x-auto rounded-lg shadow">
        <table class="min-w-full divide-y divide-gray-200 bg-white text-sm">
            <thead class="bg-gray-100">
                <tr>
                    <th class="px-4 py-2 text-left font-semibold">Sản phẩm</th>
                    <th class="px-4 py-2 text-left font-semibold">Số lượng</th>
                    <th class="px-4 py-2 text-left font-semibold">Kích cỡ</th>
                    <th class="px-4 py-2 text-left font-semibold">Giá</th>
                    <th class="px-4 py-2 text-left font-semibold">Tổng giá</th>
                    <th class="px-4 py-2 text-left font-semibold">Ngày tạo</th>
                    <th class="px-4 py-2 text-left font-semibold">Thao tác</th>
                </tr>
            </thead>
            <tbody class="divide-y divide-gray-100">
                @foreach (var cart in carts)
                {
                    <tr>
                        <td class="px-4 py-2">@cart.ProductId</td>
                        <td class="px-4 py-2">
                            <div class="flex items-center space-x-2">
                                <button class="rounded bg-gray-200 px-2 py-1 hover:bg-gray-300" @onclick="() => UpdateQuantity(cart, cart.Quantity - 1)">−</button>
                                <span>@cart.Quantity</span>
                                <button class="rounded bg-gray-200 px-2 py-1 hover:bg-gray-300" @onclick="() => UpdateQuantity(cart, cart.Quantity + 1)">+</button>
                            </div>
                        </td>
                        <td class="px-4 py-2">@cart.Size</td>
                        <td class="px-4 py-2 font-semibold text-red-600">@cart.Price.ToString("N0")</td>
                        <td class="px-4 py-2 font-semibold">@cart.TotalPrice.ToString("N0")</td>
                        <td class="px-4 py-2">@cart.DateCreated.ToString("dd/MM/yyyy")</td>
                        <td class="space-x-2 px-4 py-2">
                            <button class="rounded bg-red-500 px-3 py-1 text-sm text-white hover:bg-red-600" @onclick="() => DeleteCart(cart.Id)">Xoá</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

@code {
    private List<CartDto>? carts;

    protected override async Task OnInitializedAsync()
    {
        var accountId = await GetAccountIdFromLocalStorage();

        if (accountId == null)
        {
            NavigationManager.NavigateTo("/login");
        }
        else
        {
            await LoadData(accountId.Value);
        }
    }

    private async Task<int?> GetAccountIdFromLocalStorage()
    {
        var userJson = await JS.InvokeAsync<string>("localStorage.getItem", "currentUser");
        if (string.IsNullOrEmpty(userJson))
        {
            return null;
        }

        try
        {
            var user = System.Text.Json.JsonSerializer.Deserialize<User>(userJson);
            return user?.Id;
        }
        catch
        {
            return null;
        }
    }

    private async Task LoadData(int accountId)
    {
        carts = await CartService.GetCartsByAccountIdAsync(accountId);
    }

    private async Task UpdateQuantity(CartDto cart, int newQuantity)
    {
        if (newQuantity <= 0)
        {
            await DeleteCart(cart.Id);
            return;
        }

        cart.Quantity = newQuantity;
        var result = await CartService.UpdateAsync(cart);
        if (result)
        {
            var accountId = await GetAccountIdFromLocalStorage();
            if (accountId.HasValue)
            {
                await LoadData(accountId.Value);
            }
        }
    }

    private async Task DeleteCart(int id)
    {
        var confirm = await JS.InvokeAsync<bool>("confirm", $"Bạn có chắc muốn xoá giỏ hàng #{id}?");
        if (confirm)
        {
            var result = await CartService.DeleteAsync(id);
            if (result)
            {
                var accountId = await GetAccountIdFromLocalStorage();
                if (accountId.HasValue)
                {
                    await LoadData(accountId.Value);
                }
            }
        }
    }
}
